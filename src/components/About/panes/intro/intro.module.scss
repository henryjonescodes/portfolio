$background: rgb(255, 255, 255);
$textColor: black;
$textColorSecondary: rgb(63, 63, 63);

.intro {
  // height: 70%;
  // width: 70%;
  // position: absolute;
  // top: 50%;
  // left: 50%;
  // transform: translateX(-50%) translateY(-50%);
  height: 100%;
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background-color: $background;

  // gap: 8px;

  overflow: hidden;

  * {
    font-family: 'Nunito', sans-serif;
  }

  &Header {
    flex: 1;
    width: 100%;
    z-index: 0;
    position: relative;

    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
  }

}

// * ////////////////////////// * //
// *           Hello            * //
// * ////////////////////////// * //

.hello {
  z-index: 2;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 8px;
  color: $textColor;
}

.greeting {
  height: min-content;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 12px;

  &Im,
  &Hi {
    font-weight: 800;
    font-style: italic;
    text-transform: uppercase;
    font-size: 32px;
    line-height: 32px;
  }

}

.name {
  &Content {
    font-weight: 1000;
    font-style: italic;
    text-transform: uppercase;
    font-size: 30px;
    line-height: 48px;
  }
}

// * ////////////////////////// * //
// *         MicroBio           * //
// * ////////////////////////// * //

$base: $textColorSecondary;
$accent: red;
$shadow: transparent;

.wipeText {
  font: 700 calc(3rem/1.2) sans-serif;
  max-width: 30rem;

  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  justify-content: center;
  z-index: 1;

  &Word {
    color: $shadow;
    display: inline-block;
    position: relative;
    line-height: 22px;
    font-size: 20px;

    &_active {

      // Setting the stagger "by hand". You have to know the number of children beforehand and loop through them all, or set staggers only for a number of first children. Or set it with js
      @for $i from 1 through 10 {
        &:nth-child(#{$i}) {

          &::before,
          &::after {
            animation-delay: #{calc($i / 10)}s;
          }
        }
      }

      // make the font black again if no animation is playing
      @media (prefers-reduced-motion) {
        color: $base;
      }

      // the magic, kinda
      &::before {
        animation: max-height .4s cubic-bezier(0.61, 1, 0.88, 1) 1 normal both;
        color: $accent;
      }

      &::after {
        animation: max-width .7s cubic-bezier(0.61, 1, 0.88, 1) 1 normal both;
        color: $base;
      }

      &::before,
      &::after {
        // Using data attribute to avoid duplicated content in HTML. It has a very good support when used in the content property https://caniuse.com/mdn-css_types_attr
        content: attr(data-text);
        left: 0;
        // The overflowing text is cut off
        overflow: hidden;
        position: absolute;
        // Set the speak property to none, because we don't want screen readers to read every word in the paragraph twice. "Hello, hello"? No!
        speak: none;

        // In this case we just don't animate things, BUT we can maybe animate opacity only since reduced motion != no motion
        @media (prefers-reduced-motion) {
          animation: none;
          content: "";
        }
      }
    }
  }
}

@keyframes max-width {
  from {
    max-width: 0;
  }

  to {
    max-width: 100%;
  }
}

@keyframes max-height {
  from {
    max-height: 0;
  }

  to {
    max-height: 100%;
  }
}

// * ////////////////////////// * //
// *            Debug           * //
// * ////////////////////////// * //

.button {
  position: absolute;
  bottom: 0;
  background-color: green;
  cursor: pointer;
  border-radius: 8px;
  padding: 4px;
  transition: opacity 0.2s;

  &:hover {
    opacity: 0.5;
  }

  &:active {
    opacity: 0.3;
  }
}